/*! ****************************************************************************
\ingroup IN_OUT_GROUP
\fn  int writebin(void* x, int n, int dtype, char* fn)

\brief
Save 1D vector to the binary file

Function saves real or complex 1D vector size `n` to the binary file `fn`.
\n \n

File format supports 1D and 2D arrays and has follow format: \n\n

\verbatim

type   4 bytes type int.
       Can take on value:
       DAT_DOUBLE,  if x pointer to the real vector;
       DAT_COMPLEX, if x pointer to the complex vector;
      
n      4 bytes type int.
       Number of array rows.

m      4 bytes type  int. 
       Number of array columns. 
       This parameter equals 1 because this function saves 1D vector.
    
data   Data in binary raw.
       Data size is: 
       n * sizeof(double),    if dtype==DAT_DOUBLE;
       n * sizeof(complex_t), if dtype==DAT_COMPLEX.
\endverbatim

Binary file can be used for algorithms verification by external packages like 
GNU Octave, Matlab, Python because the function writes to a file 
without loss of accuracy. \n \n

\param[in] x
Pointer to the input vector.  \n
Vector size is `[n x 1]`. \n 
\n

\param[in] n
Size of input vector. \n 
\n

\param[in] dtype
Type of data. \n

Can be one of follow: \n 
`DAT_DOUBLE` -- real data; \n
`DAT_COMPLEX` -- complex data. \n 
\n

\param[in] fn
File name. \n 
\n

\return
`RES_OK` if file is saved successfully. \n 
Else \ref ERROR_CODE_GROUP "code error".

Reading saved binary file from GNU Octave or Matlab:
\code{.m}
function [dat, n, m] = readbin(fn)
  fid = fopen(fn);
  if(~fid)
    error('cannot to open file');
  end
  type = fread(fid, 1, 'int32');  
  n    = fread(fid, 1, 'int32');
  m    = fread(fid, 1, 'int32');
  
  if(type==0)
    dat = fread(fid, [n*m, 1], 'double');
  end
  
  if(type==1)
    y = fread(fid, [n*m*2, 1], 'double');
    dat = y(1:2:end) + 1i * y(2:2:end);
  end
  
  dat = reshape(dat, n, m);
  
  fclose(fid);
end
\endcode

\author Sergey Bakhurin www.dsplib.org
***************************************************************************** */







/*! ****************************************************************************
\ingroup IN_OUT_GROUP
\fn  int writetxt(double* x, double* y, int n, char* fn)

\brief
Save real data \f$y(x)\f$ to the text file `fn`. \n

File format

\verbatim
x[0]    y[0]
x[1]    y[1]
...     ...
x[n-1]  y[n-1]
\endverbatim  

Text file can be used to plotting data with a third-party program
for example, the GNUPLOT package (see \ref PLOT_GROUP). \n

\param[in] x
Pointer to the vector `x`.  \n
Vector size is `[n x 1]`. \n 
\n

\param[in] y
Pointer to the vector `y`.  \n
Vector size is  `[n x 1]`.  \n
This pointer can be `NULL`. 
File will have only one column corresponds to `x` vector in this case. \n 
\n

\param[in] n
Size of vectors `x` and `y`. \n 
\n

\param[in] fn 
File name. \n 
\n


\return
`RES_OK` if file is saved successfully. \n 
Else \ref ERROR_CODE_GROUP "code error".

\note 
This function rounds data when writing to a file.
So, it is not recommended to use it to verify algorithms.

\author Sergey Bakhurin www.dsplib.org 
***************************************************************************** */





/*! ****************************************************************************
\ingroup IN_OUT_GROUP
\fn  int writetxt_3d(double* x, int nx, double* y, int ny, double* z, char* fn)

\brief
Save data \f$ z(x,y)\f$  to the text file `fn` for 3D surface plotting.

Function \f$ z(x,y)\f$ describes as matrix `z[x[n], y[n]]` as it showed on the
follow figure:

\image html writetxt_3d_matrix.png

Matrix `z` writen in the memory by columns as it it showed on the figure by 
red arrow. \n

Text file fas follow format: \n

\verbatim
x[0]    y[0]    z[0, 0]
x[1]    y[0]    z[1, 0]
x[2]    y[0]    z[2, 0]
...     ...     ...
x[nx-1] y[0]    z[nx-1, 0]

x[0]    y[1]    z[0, 1]
x[1]    y[1]    z[1, 1]
x[2]    y[1]    z[2, 1]
...     ...     ...
x[nx-1] y[1]    z[nx-1, 1]

...     ...     ...
...     ...     ...
...     ...     ...

x[0]    y[ny-1] z[0, ny-1]
x[1]    y[ny-1] z[1, ny-1]
x[2]    y[ny-1] z[2, ny-1]
...     ...     ...
x[nx-1] y[ny-1] z[nx-1, ny-1]
\endverbatim  
Each `z` matrix value is writen on individual line corresponds to `x` 
and `y` values. Matrix columns are separated from each other by an empty line.

The file can be used to build a 3D surface with a third-party program
for example, the GNUPLOT package (see \ref PLOT_GROUP). Also this format
supported by pgfplot3d packages of the Latex system. \n

\param[in] x
Pointer to the vector `x`.  \n
Vector size is `[nx x 1]`. \n 
\n

\param[in] nx
Size of vector `x`. \n 
\n


\param[in] y
Pointer to the vector `y`.  \n
Vector size is  `[ny x 1]`.  \n
\n

\param[in] ny
Size of vector `y`. \n 
\n

\param[in] z
Pointer to the matrix `z(x, y)`. \n 
Size of matrix is  `[nx x ny]`.
\n

\param[in] fn 
3D data file name. \n 
\n


\return
`RES_OK` if file is saved successfully. \n 
Else \ref ERROR_CODE_GROUP "code error".

Example of 3D surface plotting:

\include writetxt_3d_test.c

Program calcultes function

\f[
z(x,y) = x \exp(-x^2 -y^2)
\f]

and save data to the `dat/data3d.txt` file.\n
In addition, GNUPLOT built a 3D surface by data
 saved to the `dat/data3d.txt` file:

\image html writetxt_3d.png


\author Sergey Bakhurin www.dsplib.org 
***************************************************************************** */





/*! ****************************************************************************
\ingroup IN_OUT_GROUP
\fn  int writetxt_int(int* x, int* y, int n, char* fn)

\brief
Save interger data \f$y(x)\f$ to the text file `fn`. \n

File format

\verbatim
x[0]    y[0]
x[1]    y[1]
...     ...
x[n-1]  y[n-1]
\endverbatim  

Text file can be used to plotting data with a third-party program
for example, the GNUPLOT package (see \ref PLOT_GROUP). \n

\param[in] x
Pointer to the interger vector `x`.  \n
Vector size is `[n x 1]`. \n 
\n

\param[in] y
Pointer to the interger vector `y`.  \n
Vector size is  `[n x 1]`.  \n
This pointer can be `NULL`. 
File will have only one column corresponds to `x` vector in this case. \n 
\n

\param[in] n
Size of vectors `x` and `y`. \n 
\n

\param[in] fn 
File name. \n 
\n


\return
`RES_OK` if file is saved successfully. \n 
Else \ref ERROR_CODE_GROUP "code error".

\author Sergey Bakhurin www.dsplib.org 
***************************************************************************** */
