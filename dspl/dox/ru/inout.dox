/*! ****************************************************************************
  \ingroup IN_OUT_GROUP
  \fn  int gnuplot_script(int argc, char* argv[], char* fn)
  \brief Функция вызова скрипта 
         <a href = "http://www.gnuplot.info/">пакета GNUPLOT</a> 
         для построения графика. 

  Данная функция использует параметры вызова программы `argc` и `argv[]` 
  и обрабатывает их для построения графиков.
  
  Механизм построения графиков при помощи данной функции следующий:
  1. Основная программа производит расчет данных и сохранение их в текстовых
     файлах. \n
  2. Для построения графика из текстовых файлов необходимо подготовить 
     plt-скрипт - текстовый файл описывающий стиль отображения графика 
     и файлы данных. \n
  3. Основная программа вызывает функцию `gnuplot_script` в которую транслирует
     параметры отображения и имя plt-скрипта для построения графика.
     В зависимости от передаваемых программой параметров график может быть
     построен в отдельном окне, или сохранен в png-файл. \n
     
     


  \param[in] argc   Число параметров вызова основной программы. \n
                    Данный параметр указывает размер массива 
                    параметров `argv[]`. \n \n
    
  \param[in] argv[] Указатель на массив строк, передаваемых параметров. \n
                    `argv[0]` -- имя программы. \n
                    `argv[1]` -- параметр, который задает отображение графика
                                 пакетом GNUPLOT. \n
                     Параметр `argv[1]` может принимать следующие значения: \n
                     `--noplot`  произвести расчет данных без 
                                 построения графиков. \n
                     `--plotwin` построение графика в отдельном окне. \n
                     `--plotpng` построение графика в png-файл. \n \n

  \param[in] fn     Имя файла plt-скрипта построения графика. \n \n

 
  \return
  `RES_OK` График построен успещно. \n
           В противном случае возвращается код ошибки пакета GNUPLOT. \n


  Рассмотрим пример. Пусть основная программа рассчитывает некоторые данные 
  (отрезок синсоиды и косинусоиды) и сохраняет их в текстовые 
  файлы `dat/sine.txt` и `dat/cosine.txt`: \n
  
  \include gnuplot_script_test.c
  \n \n
  В каталоге `gnuplot` расположен plt-файл `gnuplot/gnuplot_script.plt`: \n
  \include gnuplot_script.plt
  \n \n
  После компиляции основной программы возможны следующие варианты: \n
  1. Программа вызвана без параметров. 
     Тогда будет построен график в отдельном окне
  \image html gnuplot_script_wxt.png
  2. Программа вызвана с параметром `--noplot`. 
     Построения графика не будет, но в дириктории `dat` будут 
     сохранены данные в текстовых файлах. \n
  3. Программа вызвана с параметром `--plotwin`. 
     Также будет построен график в отдельном окне. \n
  4. Программа вызвана с параметром `--plotpng`. 
     График не будет выведен в отдельное окно, но будет создан графический
     файл `img/gnuplot_script.png`
     \image html gnuplot_script.png
  \n \n
  
  \note Для изменения стиля отображения графика, цвета линий, подписей и др.
        необходимо модифицировать plt-файл. Документацию по оформлению графиков
        можно найти на <a href="http://gnuplot.sourceforge.net/demo_5.2/"> 
        сайте проекта GNUPLOT.</a>
        \n
        \n
        функция передает параметр `plotterm` в plt-скрипт. Поэтому строки
        \verbatim
        if(!exists("plotterm")) plotterm = 'wxt'
        if(plotterm eq "pngcairo") set output 'img/gnuplot_script.png'
        \endverbatim 
        необходимо сохранить. Но имя файла `img/gnuplot_script.png` может быть
        произвольным.
  
  
  \author
    Бахурин Сергей.
    www.dsplib.org  
***************************************************************************** */








/*! ****************************************************************************
  \ingroup IN_OUT_GROUP
  \fn  int writebin(void* x, int n, int dtype, char* fn)
  \brief Сохранить данные в бинарный файл
 
  Функция сохраняет реальный или комплексный вектор данных 
  размера `[n x 1]` в бинарный файл `fn`.  \n \n
  
  Файл является универсальным для хранения как одномерных, 
  так и двумерных массивов и имеет следующий формат:  \n \n
  
  type   4 байта типа `int`.  \n
         Может принимать значение: \n
         `DAT_DOUBLE`,  если `x` указатель на вектор вещественных чисел;  \n
         `DAT_COMPLEX`, если `x` указатель на вектор комплексных чисел. \n \n
        
  `n`    4 байта типа `int`.  \n
         Количество строк данных.  \n \n
  
  `m`    4 байта типа `int`. \n
         Количество столбцов данных.  \n
         При сохранении вектора всегда равно 1. \n \n
      
  `data` после идут данные в бинарном виде. \n
         Размер данных: \n
         `n * sizeof(double)`,    если `dtype==DAT_DOUBLE`; \n
         `n * sizeof(complex_t)`, если `dtype==DAT_COMPLEX`. \n \n

  Файл может быть использован для верификации алгоритмов сторонними пакетами,
  такими как GNU Octave или Matlab. \n \n
 
  \param[in] x      Указатель на массив данных.  \n
                    Размер вектора `[n x 1]`. \n \n
    
  \param[in] n      Размер вектора данных. \n \n

  \param[in] dtype  Тип данных. \n
                    Может принимать значения: \n 
                    `DAT_DOUBLE` -- вещественные данные; \n
                    `DAT_COMPLEX` -- комплексные данные. \n \n

  \param[in] fn     Имя файла. \n \n
 
  \return
  `RES_OK`      Файл сохранен успешно. \n
                В противном случае \ref ERROR_CODE_GROUP "код ошибки": \n
  
  \note 
    Данная функция производит запись в файл без потери точности, 
    поэтому рекомендуется использовать ее для верификации данных DSPL. \n \n

    Функция для чтения бинарного файла в GNU Octave и Matlab:

    \code
        function [dat, n, m] = readbin(fn)

        fid = fopen(fn);
        if(~fid)
          error('cannot to open file');
        end
        type = fread(fid, 1, 'int32');  
        n    = fread(fid, 1, 'int32');
        m    = fread(fid, 1, 'int32');

        if(type==0)
          dat = fread(fid, [n*m, 1], 'double');
        end

        if(type==1)
          y = fread(fid, [n*m*2, 1], 'double');
          dat = y(1:2:end) + 1i * y(2:2:end);
        end

        dat = reshape(dat, n, m);

        fclose(fid);
        end
    \endcode


  \author    Бахурин Сергей. www.dsplib.org  
***************************************************************************** */







/*! ****************************************************************************
  \ingroup IN_OUT_GROUP
  \fn  int writetxt(double* x, double* y, int n, char* fn)
  \brief Сохранить вещественные данные в текстовый файл
 
  Функция сохраняет вещественные данные в текстовый файл `fn`.  \n
  
  Файл имеет следующий формат: \n

    \verbatim
  x[0]  y[0]
  x[1]  y[1]
  ...
  x[n-1]  y[n-1]
    \endverbatim  

  Файл может быть использован для построения графика сторонней программой,
  например пакетом GNUPLOT (см. функцию \ref gnuplot_script). \n \n

  \param[in] x  Указатель на первый вектор.  \n
                Размер вектора `[n x 1]`. \n \n
 
  \param[in] y  Указатель на второй вектор.  \n
                Размер вектора  `[n x 1]`.  \n
                Может быть `NULL`.  \n
                Файл будет содержать только один столбец соответствующий 
                вектору `x` если `y == NULL`. \n \n

  \param[in] n  Размер входных векторов. \n \n

  \param[in] fn Имя файла. \n \n
 
  
  \return
  `RES_OK`   Файл сохранен успешно. \n
             В противном случае \ref ERROR_CODE_GROUP "код ошибки": \n
  
  \note 
    Данная функция производит округление данных при записи в файл. 
    Поэтому не рекомендуется использовать ее для верификации данных DSPL.

  \author Бахурин Сергей. www.dsplib.org  
***************************************************************************** */
