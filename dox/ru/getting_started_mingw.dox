/*! \page getting_started_windows_gcc Быстрый старт использования библиотеки в системе Windows (GCC компилятор)


\tableofcontents

Запуск DSPL в системе Windows требует установки компилятора, Unix-утилит, и
пакета построения графиков GNUPlot. Также желательно установить консольный
файловый менеджер Far.




\subsection install_gcc Установка компилятора GCC в системе Windows
<a name = "install_gcc"></a>
<h2> Установка компилятора GCC в системе Windows </h2>

GCC компилятор в системе Windows реализован в проекте MinGW64.
Скачиваем дистрибутив MinGW64 с сайта
<a href = "https://sourceforge.net/projects/mingw-w64/files/">
sourceforge.net
</a>, соответствующий разрядности вашей системы Windows.

Для 64-битной системы вы можете скачать по
<a href = "https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/sjlj/x86_64-8.1.0-release-posix-sjlj-rt_v6-rev0.7z">
прямой ссылке
</a>.<BR>

Разархивируем дистрибутив на диск `C:\`. В результате на диске `C:\`
появится директория `mingw64` в которой будет несколько папок.

Перейдя в директорию `C:\mingw64\bin`  можно увидеть множество исполняемых
файлов, в частности `gcc.exe` который вызывается для компиляции кода.

\image html mingw_bin.png

Теперь надо операционной системе прописать в системную
переменную `Path` путь к директории `C:\mingw64\bin`,
чтобы при вызове компиляции система искала `gcc.exe` по указанному пути.


В системе Windows необходимо открыть свойства компьютера,
и перейти в дополнительные параметры системы. После открыть переменные среды:

\image html path_1.png


нажать кнопку Создать и добавить путь `C:\mingw64\bin`,
 как это показано на следующем рисунке:

\image html path_2.png


Если вы используете opensource приложения, например GNU Octave,
то они могут в своем составе также иметь GCC компилятор.

Поэтому рекомендуется ставить путь `C:\mingw64\bin`
в списке переменной `Path` самым первым, нажатием кнопки Вверх:

\image html path_3.png


В предыдущих версиях Windows переменная редактировалась в одной строке:

\image html path_old.png

В этом случае надо вставить `C:\mingw64\bin;` вначало строки переменной `Path`.

После того как переменная `Path` изменена система должна увидеть GCC.
Открываем консоль и проверяем, система увидела GCC компилятор.

Для этого нажимаем Пуск-> Все приложения -> Служебные Windows
и выбираем Командная строка.

В консоли вводим

\verbatim
gcc --version
\endverbatim


и вывод должен быть следующий:

\image html gcc_ver.png


На этом настройка компилятора GCC окончена.




\subsection install_unixutils Установка Unix утилит в системе Windows
<a name = "install_unixutils"></a>
<h2> Установка Unix утилит в системе Windows</h2>


Для работы с кроссплатформенным компилятором gcc необходимо установить
дополнительный набор Unix-утилит.

Скачиваем набор Unix-утилит со
<a href = "https://sourceforge.net/projects/unxutils/files/latest/download">
страницы SourceForge</a>

Распаковываем в директорию `C:\UnxUtils`
Тогда в директории `C:\UnxUtils\usr\local\wbin`
будет набор утилит:

\image html unxutils.png

Для того чтобы эти утилиты увидела система, директорию `C:\UnxUtils\usr\local\wbin`

Также надо добавить к переменной `Path`,
также как это было описано выше для GCC компилятора:


\image html path_unx.png

На этом настройка Unix-утилит окончена.







\subsection install_gnuplot Установка программы построения графиков GNUPlot
<a name = "install_gnuplot"></a>
<h2>Установка программы построения графиков GNUPlot</h2>

При работе с DSPL требуется строить графики сигналов, спектров и т.д.
Для этого используется кроссплатформенный пакет GNUPlot.


Скачиваем архив с пакетом построения графиков
со
<a href = "https://sourceforge.net/projects/gnuplot/files/gnuplot/5.2.4/gp524-win64-mingw_3.7z/download">
страницы SourceForge</a>

Pазархивируем на диск `C:\`.

Получаем следующую директорию с исполняемыми файлами GNUPlot:

\image html gnuplot.png

Снова прописываем путь к директории `C:\gnuplot\bin` в переменную `Path`

\image html path_gnuplot.png

На этом настройка GNUPlot окончена.













\subsection install_far Установка консольного файлового менеджера Far manager
<a name = "install_far"></a>
<h2>Установка консольного файлового менеджера Far manager</h2>

На самом деле это не обязательный шаг, но Far сильно облегчает работу
 с командной строкой в Windows.

Скачиваем дистрибутив с
<a href = "https://www.farmanager.com/download.php?l=ru">
официального сайта
</a> и устанавливаем его.

После установки запускаем и видим две панели консольного файлового менеджера:

\image html far_manager.png


В сети можно найти
<a href = "https://documentation.help/Far-Manager-ru/PanelCmd.html">
множество информации по использованию Far</a>.





Итак, мы установили компилятор MinGW64, набор Unix утилит,
программу построения графиков GNUPlot и консольный файловый менеджер.

Теперь можно компилировать DSPL и запускать программы с ее использованием.






\subsection compile_gcc Компиляция libdspl-2.0 и запуск программы с ее использованием
<a name = "compile_gcc"></a>
<h2>Компиляция libdspl-2.0 и запуск программы с ее использованием</h2>


Скачиваем с сайта Github.com
<a href="https://github.com/Dsplib/libdspl-2.0">
сайта Github.com
</a>
исходные коды DSPL:

\image html dspl_github.png



Разархивируем в рабочую директорию.

Вы можете разархивировать в любую директорию, libdspl-2.0 будет
обозначать директорию в которую разархивированы исходные коды.

Запускаем  Far manager и переходим в директорию libdspl-2.0.

\image html dspl_dir.png


Далее нажимаем `Ctrl-O`  и скрываем панели Far, после вводим  команду `mingw32-make`

Если все настроено верно, то вы увидите процесс компиляции библиотеки и всех тестовых программ.

\image html compileproc.png


По завершению компиляции снова нажимаем `Ctrl-O` (возвращаем панели Far),
переходим в директорию `libdspl-2.0/example/bin` и видим скомпилированные exe-файлы:

\image html dspl_exe.png


Можно выполнить любой exe-файл. Например выполним `sinc_test.exe` и
увидим окно с графиками функции.


*/
